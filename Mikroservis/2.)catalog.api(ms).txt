kullanıcının kaydettiği kurslardan sorumlu, bu kurslarla ilgili işlemleri(crud) gerçekleştirir..net core api ve mongodb(ilişkisel değil) kullanılacak.
veritabanındaki sütunlar dinamikse(ihtiyaca göre artıp azaltılıyorsa) nosql kullanmak daha mantıklı.

Veritabanı collection(table)ların yapısı
------------------------------------------

Category.apı'de kurslarla ilgili bilgiler olacak. Category tablosu, Course tablosu, her kategorinin birden fazla kursu olacak. Kursların Feature tablosu olacak. Category ile Course arasında 1'e çok ilişki var. Course ve Feature arasında
1'e 1 ilişki var.

Shared Class Library
---------------------
MS'lerde kullanılacak ortak classların, nesnelerin burada tanımlanır. ilgili mslere referans olarak verilir.

Dto Nesneleri Oluşturma
------------------------
Model sayımız kadar DTO oluştururuz. Ek olarak CreateCourse ve UpdateCourse olmak üzere 2 DTO daha oluştururuz.

ICategoryService/CategoryService
--------------------------------
 veritabanından data çekme işlemini gerçekleştirecek olan servis. Repository olmamasının nedeni, servis içerisinde db'den alınan nesnelerin dto'ya dönüştürülmesi yapılıyor. Dönüştürme işlemi repository'nin işi olmadığı için
servis yazarız.

ICourseService/CourseService
----------------------------
bu serviste kursların eklenmesi, silinmesi, güncellenmesi işlemleri yapılıyor.

FindOneAndUpdate ile FindOneAndReplace Farkı
--------------------------------------------
findOneAndUpdate : Bulduğu datada sadece değiştirmesi istenen alanı günceller. Diğer alanlar aynı kalır.
findOneAndReplace : Bulduğu datada her veriyi siler sadece değiştirmesi istenen alanın yeni değeri kalır.

Örneğin : Data {"name":"James", "age":"21"}

findOneAndUpdate kullanıldığında  {"age":"22"}, sonuç {"name":"James", "age":"22"}

findOneAndReplace kullanıldığında  {"age":"22"}, sonuç {"age":"22"} (isim silinmiş)


Portainer
----------
bilgisayardaki containerları, imageları yönetmeyi sağlayan arayüz.
